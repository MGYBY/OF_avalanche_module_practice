/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  avalanche                             |
|   \\  /    A nd           | https://develop.openfoam.com/Community/avalanche|
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application         faSavageHutterFoam;

startFrom           latestTime;

startTime           0;

stopAt              endTime;

endTime             20;

deltaT              0.0025;

writeControl        adjustableRunTime;

writeInterval       1.0;

purgeWrite          0;

writeFormat         ascii;

writePrecision      6;

writeCompression    off;

timeFormat          general;

timePrecision       6;

runTimeModifiable   yes;

adjustTimeStep      yes;

initDeltaT          yes;

maxCo               1.0;

libs (
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libswakFiniteArea.so"
    // just for testing the plugins
    "libswakTestFunctionPlugin.so"
    "libswakFacSchemesFunctionPlugin.so"
);

functions
{
    // #include "shapefileWrite"
    // #include "gridfileWrite"
    #include "autoAreaToVolumeMapping"
}

functions {
    faFrontForce {
        type swakExpression;
        // type addGlobalVariable;
        valueType faPatch;
        faPatchName frontBlockWall;
        variables (
            "grav=9.81;"
            "normalDepth=0.20;"
            "normalVelocity=1.7405;"
            "channelSlopeCoeff=0.91192;"
            "width=2.0;"
            );            
        // expression "0.50*grav*pow(h,2.0)*area()";
        expression "0.50*grav*pow(h,2.0)";
        accumulations (
            sum
        );
        verbose false;
    }

    faBackForce {
        type swakExpression;
        // type addGlobalVariable;
        valueType faPatch;
        faPatchName rearBlockWall;
        variables (
            "grav=9.81;"
            "normalDepth=0.20;"
            "normalVelocity=1.7405;"
            "channelSlopeCoeff=0.91192;"
            "width=2.0;"
            );            
        // expression "(-1.0)*0.50*grav*pow(h,2.0)*area()";
        expression "(-1.0)*0.50*grav*pow(h,2.0)";
        accumulations (
            sum
        );
        verbose false;
    }

}

// ************************************************************************* //
